
import rtmidi.*;
import rtmidi.RtMidi.Api;

    #if (!mac && !android && !ios && !linux && !windows)
        #error "You should define a target, please read and modify build.hxml"
    #end


class Test {

    static function main() {
        trace(RtMidi.getVersion());
        var apis_ = RtMidi.getCompiledApi();
        trace('The following APIs are available:');
        for(api in apis_) {
            switch(api) {
                case Api.UNSPECIFIED:
                    trace('Unspecified');
                case Api.MACOSX_CORE:
                    trace('Mac OSX Core');
                case Api.LINUX_ALSA:
                    trace('Linux ALSA');
                case Api.UNIX_JACK:
                    trace('Unix Jack');
                case Api.WINDOWS_MM:
                    trace('Windows MM');
                case Api.RTMIDI_DUMMY:
                    trace('RtMidi Dummy');
            }
        }

        var midiin:RtMidiIn = RtMidiIn.create();
        // trace(midiin.getCurrentApi());

        var nPorts:Int = midiin.getPortCount();
        trace('There are $nPorts MIDI input sources available.');

        for(i in 0...nPorts) {
            var portName = midiin.getPortName(i);
            trace('Input Port #${i+1}: $portName');
        }

        // var midi:RtMidi = midiin;
        // midi.openPort(0);
        midiin.openPort(0);
        trace(midiin.isPortOpen());

        var message:haxe.io.BytesData = haxe.io.Bytes.alloc(3).getData();
        var stamp:Float = 0;
        var firstTime = haxe.Timer.stamp();
        while(haxe.Timer.stamp() - firstTime < 5) {
            stamp = midiin.getMessage(message);
            if(message.length > 0) {
                var s = '';
                for(n in 0...message.length) s += 'Byte $n = ${message[n]}, ';
                s += 'stamp = $stamp';
                trace(s);
            }
        }

        midiin.destroy();

        var midiout = RtMidiOut.create();
        midiout.openPort(0);
        var message = haxe.io.Bytes.alloc(3);
        message.set(0, 144);
        message.set(1, 64);
        message.set(2, 90);
        midiout.sendMessage(message.getData());

        var t = haxe.Timer.stamp();
        while(haxe.Timer.stamp() - t < 1) {};
        message.set(0, 128);
        message.set(1, 64);
        message.set(2, 40);
        midiout.sendMessage(message.getData());
        midiout.destroy();
    } //main

} //Test